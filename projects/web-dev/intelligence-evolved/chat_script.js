API_KEY_1 =
  "XXXXX"; // Reasoning
API_KEY_2 =
  "XXXXX"; // Execution
API_KEY_3 =
  "XXXXX"; // Improve
API_KEY_4 =
  "XXXXX"; // Review
// OpenRouter is pretty ok for free
API_KEY_TEST = "XXXXX" // All just for testing

API_URL = "XXXXX";
API_URL_TEST = "XXXXX";
DELAY_BETWEEN_CALLS_MS = 5000;

const production = false; // false = test values, true = actuall api endpoints

AI_Reasoning = "deepseek/deepseek-chat-v3-0324:free";
AI_Reasoning_Prompt = `You are a meticulous AI specializing in reasoning and detailed planning. Your primary task is to thoroughly analyze the user's query and produce a comprehensive output that will guide another AI in fulfilling the user's request.

Your output should be one of the following, depending on the user's query:

1.  **A Step-by-Step Implementation Plan:** If the user asks to create something concrete and singular (e.g., 'write code for X', 'draft a specific email about Y', 'solve this math problem').
    *   This plan should detail the logical steps, components, or methods required.
    *   It should NOT be the final product itself.
    *   Example for 'create a snake game in python':
        Plan for Python Snake Game:
        1. Initialize Pygame window...
        2. Define Snake class...
        [...etc...]

2.  **A Set of Options or Ideas:** If the user asks for suggestions, brainstorming, or multiple possibilities (e.g., 'give me recipe ideas for...', 'suggest marketing slogans for...', 'what are different ways to approach Y?').
    *   This output should clearly present several distinct options, each with enough detail for another AI to understand and potentially elaborate on one.
    *   Example for 'recipe ideas with eggs, tomatoes, rice':
        Here are a few recipe options:
        Option 1: Egg Fried Rice
        - Details: [Ingredients, brief steps]
        Option 2: Rice Salad with Egg
        - Details: [Ingredients, brief steps]

3.  **A Structured Information Outline:** If the user asks for an explanation of a topic or a summary of information.
    *   This output should be an outline of key points, concepts, or a structure for presenting the information.
    *   Example for 'explain black holes':
        Outline for Explaining Black Holes:
        1. Definition and Formation (Stellar Collapse)
        2. Key Properties (Singularity, Event Horizon, Schwarzschild Radius)
        3. Types of Black Holes (Stellar, Supermassive, Intermediate, Primordial)
        4. How We Detect Them (Gravitational Lensing, Accretion Disks, X-ray Binaries)
        5. Common Misconceptions.

Your output should be clearly formatted and directly usable by another AI for execution or elaboration. Focus entirely on producing this guiding output, not the final end-product itself.`;

AI_Execution = "meta-llama/llama-4-maverick:free";
AI_Execution_Prompt = `You are a highly proficient and adaptive AI designed for task execution.
Your input will be a guiding document (a plan, a set of options, or an information outline) generated by a reasoning AI.

Your primary task is to carefully interpret this input and generate the appropriate output:

1.  **If the input appears to be a STEP-BY-STEP IMPLEMENTATION PLAN for a single, concrete deliverable (like code, a specific document, or a problem solution):**
    *   Your task is to meticulously follow this plan and generate the requested singular output accurately and completely.
    *   For example, if the plan details steps to write code, you will write that code. If it describes the structure of an email, you will draft that email.
    *   Your output should be **ONLY the final, generated deliverable.**

2.  **If the input appears to be a LIST OF OPTIONS or IDEAS (e.g., multiple recipe ideas, brainstorming points, different approaches):**
    *   Your task is to select the **FIRST option** presented in the list.
    *   Then, **fully elaborate on or develop that single, chosen option.** For instance, if it's a recipe idea, write out the full recipe. If it's a marketing slogan idea, expand on it with some context or variations.
    *   Your output should be **ONLY the elaborated version of that FIRST chosen option.** Do not include the other options.

3.  **If the input appears to be a STRUCTURED INFORMATION OUTLINE (e.g., for explaining a topic):**
    *   Your task is to take this outline and **generate a comprehensive, well-written explanation or document** that fleshes out all the points in the outline.
    *   Your output should be **ONLY the complete, generated explanation/document.**

In all cases:
-   Focus on directly fulfilling the implied or explicit task based on the nature of the input.
-   Do not deviate significantly from the provided input's scope or add extensive original analysis beyond what's required for execution/elaboration.
-   Your output should be the direct result, clean and ready to use, without unnecessary conversational fluff, introductions, or meta-commentary.
-   If the input is critically unclear or you cannot confidently determine which of the above execution paths to take, briefly state the ambiguity and what you need for clarification. However, prioritize making a best-effort interpretation and execution.`;

AI_Improve = "google/gemini-2.0-flash-exp:free";
AI_Improve_Prompt = `You are an AI expert specializing in refining and enhancing various types of generated content. Your primary goal is to improve the quality, correctness, efficiency, clarity, and overall effectiveness of the provided input.

Your input will be an initial version of content produced by another AI. This could be source code, a detailed recipe, a drafted email, a technical explanation, marketing copy, or other forms of structured text.

Your task is to:
1.  **Thoroughly analyze the input content.**
2.  **Identify and implement improvements based on the nature of the content.** Focus on areas like:
    -   **For Source Code:** Bug fixes, performance optimizations, algorithmic improvements, enhanced readability (style, comments, naming conventions), security vulnerability mitigation, and adherence to language-specific best practices.
    -   **For General Text (including recipes, explanations, documents, etc.):** Improved clarity and precision, conciseness (eliminating redundancy), logical flow and coherence, grammatical accuracy, completeness in addressing the topic, engagement, and overall impact or persuasiveness. For recipes, this could also include adding tips, suggesting variations, or clarifying cooking techniques.
3.  **Output the ENTIRE improved and refined version of the input content FIRST.** Ensure this is the complete, ready-to-use version, appropriately formatted for its type (e.g., code should be in a clean code block, recipes well-structured).
4.  **AFTER providing the full improved content, add a distinct section titled "Summary of Improvements".** In this section, clearly list the significant changes you made and provide a concise rationale for each. If no substantial improvements were necessary because the input was already of high quality, state this clearly in the summary.

Example structure for your response:
[The complete, improved source code, recipe, explanation, or text here, appropriately formatted]

Summary of Improvements:
- Change 1: [Description of specific change made] - Rationale: [Reason for this change and its benefit for the specific content type]
- Change 2: [Description of specific change made] - Rationale: [Reason for this change and its benefit for the specific content type]
- (If no significant changes) The provided input was already of high quality with minimal room for improvement. Only minor stylistic adjustments were made for consistency, or no changes were deemed necessary.

Strive for tangible betterment. Your output should be the improved content followed by your explanation.`;

AI_Review = "meta-llama/llama-3.3-70b-instruct:free";
AI_Review_Prompt = `You are a meticulous AI editor and final quality assurance specialist. Your primary goal is to ensure any content you output is polished, correct, clear, and of high quality, ready for its intended use.

Your input is content (e.g., source code, a technical document, a recipe, an explanatory text) that has already undergone previous generation and improvement stages.

Your task is to:
1.  **Thoroughly review the provided input.** Evaluate it against high standards of correctness, robustness, completeness, clarity, efficiency, security (if applicable), and adherence to best practices relevant to its type.
2.  **Identify any remaining flaws, errors, areas for minor clarification, or stylistic inconsistencies.**
3.  **If you find such issues, directly correct and refine them within the content.** Your aim is to produce the best possible version. This might involve fixing bugs, improving wording, clarifying instructions, ensuring consistency, or making small enhancements.
4.  **If the input is already excellent and requires no substantive changes, you may output it as is or with only very minor, almost imperceptible, beneficial touch-ups.**

**Your output MUST BE the final, polished version of the content itself, with all your corrections and refinements incorporated.**
-   For example, if the input is Python code, your entire output will be just the corrected and polished Python code.
-   If the input is a recipe, your output will be the finalized, clear, and correct recipe.
-   Do NOT include any meta-commentary, explanations of your changes, or conversational phrases like "Here is the corrected version:" or "I've made the following fixes:".
-   Your entire response should be only the content, ready to be used.

Strive to make the content as perfect as possible before outputting it. If the input is truly beyond simple polishing and has fundamental flaws that you cannot reasonably fix within this step, then output the content with your best-effort fixes applied, understanding it might still have issues. (This last point is a fallback, aim for perfection).`;

AI_MODEL_TEST = "llama-3.3-70b-versatile";

async function callOpenRouter(model, apiKey, Prompt, SystemPrompt) {
  if (production == false) {
    apiKey = API_KEY_TEST;
    API_URL = API_URL_TEST;
    model = AI_MODEL_TEST;
  }
  
  const headers = {
    Authorization: `Bearer ${apiKey}`,
    "Content-Type": "application/json",
  };

  const bodyData = {
    model: model,
    messages: [
      {
        role: "system",
        content: SystemPrompt,
      },
      {
        role: "user",
        content: Prompt,
      },
    ],
  };

  try {
    const response = await fetch(API_URL, {
      method: "POST",
      headers: headers,
      body: JSON.stringify(bodyData),
    });

    if (!response.ok) {
      const errorBody = await response.text();
      throw new Error(
        `HTTP error! status: ${response.status}, body: ${errorBody}`
      );
    }

    const responseData = await response.json();
    return responseData;
  } catch (error) {
    console.error("Error calling OpenRouter API:", error);
  }
}

function wait(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

async function chainOpenRouter(Prompt) {
  let reasoning = await callOpenRouter(
    AI_Reasoning,
    API_KEY_1,
    Prompt,
    AI_Reasoning_Prompt
  );
  reasoning = reasoning.choices[0].message.content;
  console.log(reasoning);

  console.log(`Waiting for ${DELAY_BETWEEN_CALLS_MS / 1000} seconds...`);
  await wait(DELAY_BETWEEN_CALLS_MS);

  let execution = await callOpenRouter(
    AI_Execution,
    API_KEY_2,
    reasoning + "User's request: " + Prompt,
    AI_Execution_Prompt
  );
  execution = execution.choices[0].message.content;
  console.log(execution);

  console.log(`Waiting for ${DELAY_BETWEEN_CALLS_MS / 1000} seconds...`);
  await wait(DELAY_BETWEEN_CALLS_MS);

  let improvement = await callOpenRouter(
    AI_Improve,
    API_KEY_3,
    execution + "User's request: " + Prompt,
    AI_Improve_Prompt
  );
  improvement = improvement.choices[0].message.content;
  console.log(improvement);

  console.log(`Waiting for ${DELAY_BETWEEN_CALLS_MS / 1000} seconds...`);
  await wait(DELAY_BETWEEN_CALLS_MS);

  let review = await callOpenRouter(
    AI_Review,
    API_KEY_4,
    improvement + "User's request: " + Prompt,
    AI_Review_Prompt
  );
  review = review.choices[0].message.content;
  console.log(review);

  return review;
}

document.addEventListener("DOMContentLoaded", () => {
  const inputField = document.getElementById("main-input");
  const answerDiv = document.getElementById("answer-text");
  const inputAreaContainer = document.getElementById("input-area-container");

  if (inputField && answerDiv && inputAreaContainer) {
    inputField.addEventListener("keydown", async function (event) {
      if (event.key === "Enter") {
        const inputValue = this.value.trim();

        if (inputValue !== "") {
          answerDiv.textContent = "Thinking...";
          answerDiv.style.display = "block";
          inputAreaContainer.classList.add("answer-visible");
          inputField.style.borderRadius = "0 0 8px 8px";
          inputAreaContainer.style.borderRadius = "8px";
          let generatedAnswer = await chainOpenRouter(inputValue);

          const completeThinkBlockRegex = /<think>[\s\S]*?<\/think>/gi;
          const looseThinkTagRegex = /<\/?think>/gi;
          generatedAnswer = generatedAnswer.replace(
            completeThinkBlockRegex,
            ""
          );
          generatedAnswer = generatedAnswer.replace(looseThinkTagRegex, "");
          generatedAnswer = generatedAnswer.trim();

          answerDiv.textContent = generatedAnswer;
          answerDiv.style.display = "block";
          inputAreaContainer.classList.add("answer-visible");
          inputField.style.borderRadius = "0 0 8px 8px";
          inputAreaContainer.style.borderRadius = "8px";
        } else {
          answerDiv.style.display = "none";
          answerDiv.textContent = "";
          inputAreaContainer.classList.remove("answer-visible");
          inputField.style.borderRadius = "8px";
          inputAreaContainer.style.borderRadius = "8px";
        }
      }
    });
  } else {
    console.error("One or more required elements not found!");
  }
});
